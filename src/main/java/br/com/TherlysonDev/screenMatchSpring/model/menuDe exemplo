package br.com.TherlysonDev.screenMatchSpring.principal;

import br.com.TherlysonDev.screenMatchSpring.controller.ControladorSerie;
import br.com.TherlysonDev.screenMatchSpring.model.DadosEpisodio;
import br.com.TherlysonDev.screenMatchSpring.model.DadosSerie;
import br.com.TherlysonDev.screenMatchSpring.model.DadosTemporada;
import br.com.TherlysonDev.screenMatchSpring.model.Episodio;
import br.com.TherlysonDev.screenMatchSpring.service.ConsumoApi;
import br.com.TherlysonDev.screenMatchSpring.service.ConverteDados;

import java.util.*;
import java.util.stream.Collectors;

public class Principal {
    private Scanner scanner = new Scanner(System.in);
    private ConsumoApi consumo = new ConsumoApi();
    private ConverteDados converte = new ConverteDados();
    private ControladorSerie controlador = new ControladorSerie();
    private final String ENDERECO = "https://www.omdbapi.com/?t=";
    private final String apiKey = "&apikey=d494adfa";

    public void exibirMenu(){
        System.out.println("====================== BEM VINDO AO OMDB SÉRIES ======================");
        String menu = "\n -> 1 - Buscar série" +
                      "\n -> 2 - Bucar todos os episódios" +
                      "\n -> 3 - Buscar os 5 melhores episódios" +
                      "\n -> 4 - Ver as notas de cada temporada" +
                      "\n -> 5 - Buscar um episódio em especifico" +
                      "\n -> 6 - Ver avaliação final dos episódios" +
                      "\n -> 0 - SAIR";
        System.out.println(menu);
        System.out.print("Digite sua opção: ");
        var opcao = scanner.nextInt();
        scanner.nextLine();
        String nomeSerie;
        switch (opcao){
            case 1:
                System.out.print("-> Qual série deseja pesquisar: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                DadosSerie minhaSerie = serie(nomeSerie);
                System.out.println(minhaSerie);
                break;
            case 2:
                System.out.print("-> Digite o nome da série: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                episodiosTotais(nomeSerie);
                break;
            case 3:
                System.out.print("-> Digite o nome da série: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                top5(nomeSerie);
                break;
            case 4:
                System.out.print("-> Digite o nome da série: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                notasTemporada(nomeSerie);
                break;
            case 5:
                System.out.print("-> Digite o nome da série: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                pesquisarEpisodio(nomeSerie);
                break;
            case 6:
                System.out.print("-> Digite o nome da série: ");
                nomeSerie = scanner.nextLine().replaceAll(" ", "+");
                avaliacaoFinalEp(nomeSerie);
                break;
            case 0:
                System.out.println("FIM DO PROGRAMA!");
                break;
            default:
                System.out.println("Digite uma opção válida!");
        }
    }

    public DadosSerie serie(String nome){
        String json = consumo.obterDadosJson(ENDERECO+nome+apiKey);
        DadosSerie dados = converte.obterDados(json, DadosSerie.class);
        return dados;
    }

    public void episodiosTotais(String nome){
        for(int i = 1; i<=serie(nome).totalSeasons(); i++){
            String jsonTemp = consumo.obterDadosJson(ENDERECO + nome
                    + "&season=" + i + apiKey);
            DadosTemporada dadosTemp = converte.obterDados(jsonTemp, DadosTemporada.class);
            controlador.adicionarTemporada(dadosTemp);
        }
        System.out.println("- TEMPORADAS E EPISÓDIOS: ");
        for(DadosTemporada temporada: controlador.getTemporadas()){
            System.out.println(temporada.season() + "º TEMPORADA: ");
            temporada.episodios().forEach(System.out::println);
        }
    }

    public List<Episodio> listaEpisodios(String nome){
        List<Episodio> episodios = controlador.getTemporadas().stream()
                .flatMap(t -> t.episodios().stream() //flatMap junta os episódios de todas as temporadas
                        .map(d -> new Episodio(t.season(), d))) //transformando cada dadoEpisodio em um episodio
                .collect(Collectors.toList());
        for(Episodio ep: episodios){
            String json = consumo.obterDadosJson(ENDERECO + nome + "&season=" + ep.getSeason()
                    + "&episode=" + ep.getEpisode() + apiKey);
            DadosEpisodio dadosEp = converte.obterDados(json, DadosEpisodio.class);
            ep.setRuntime(dadosEp.runtime());
        }
        return episodios;
    }

    public void top5(String nomeSerie){
        List<Episodio> episodios = listaEpisodios(nomeSerie);
        System.out.println("\n- Top 5 melhores episódios de " + nomeSerie + ": ");
        episodios.stream().sorted(Comparator.comparing(Episodio::getNoteImdb).reversed()) //compara e retorna em ordem descrescente por nota
                .limit(5)
                .forEach(System.out::println);
    }

    public void notasTemporada(String nome){
        List<Episodio> episodios = listaEpisodios(nome);
        System.out.println("\n- Notas de cada temporada: ");
        Map<Integer, Double> avaliaçoesPorTemporada = episodios.stream()
                .filter(e -> e.getNoteImdb() > 0.0)
                .collect(Collectors.groupingBy
                        (Episodio::getSeason, Collectors.
                                averagingDouble(Episodio::getNoteImdb))); //faz a média de todos os ep dessa temporada
        for(int i =0; i< avaliaçoesPorTemporada.size(); i++){
            int temp = i+1;
            System.out.println("Temporada: " + temp + ", Nota: " +
                    String.format("%.2f", avaliaçoesPorTemporada.get(temp)));
        }
    }

    public void pesquisarEpisodio(String nomeSerie){
        List<Episodio> episodios = listaEpisodios(nomeSerie);
        System.out.print("\nDigite o título ou um trecho do titulo que você está procurando: ");
        var titulo = scanner.nextLine();
        Optional<Episodio> epEncontrado = episodios.stream().filter(e -> e.getTitle().toUpperCase().contains(titulo.toUpperCase()))
                .findFirst(); //pega o primeiro.
        if(epEncontrado.isPresent()){
            System.out.println("-> " + epEncontrado.get());
        }else{
            System.out.println("Não foi encontrada nenhum episódio com essa palavra.");
        }
    }

    public void avaliacaoFinalEp(String nomeSerie){
        List<Episodio> episodios = listaEpisodios(nomeSerie);
        System.out.println("\n- Avaliação final dos episódios: ");
        DoubleSummaryStatistics est = episodios.stream()  //vai devolver um conjunto com algumas estatisticas importantes
                .filter(e -> e.getNoteImdb() > 0.0)
                .collect(Collectors.summarizingDouble(Episodio::getNoteImdb));
        System.out.println("Total de episódios avaliados: " + est.getCount());
        System.out.println("Média das avaliações: " + String.format("%.2f", est.getAverage()));
        System.out.println("Menor avaliação de um episódio: " + est.getMin());
        System.out.println("Maior avaliação de um episódio: " + est.getMax());
    }
}